// Import the functions you need from the SDKs you need
import { initializeApp } from "https://www.gstatic.com/firebasejs/10.4.0/firebase-app.js";
import { getDatabase, ref, push, set, onValue, update } from "https://www.gstatic.com/firebasejs/10.4.0/firebase-database.js";
import { getAnalytics } from "https://www.gstatic.com/firebasejs/10.4.0/firebase-analytics.js";

// Your web app's Firebase configuration
const firebaseConfig = {
  apiKey: "AIzaSyCDAaW-OyL_13qkF7sCxXkMhpJyrOtntjg",
  authDomain: "orders-3d979.firebaseapp.com",
  databaseURL: "https://orders-3d979-default-rtdb.asia-southeast1.firebasedatabase.app",
  projectId: "orders-3d979",
  storageBucket: "orders-3d979.firebasestorage.app",
  messagingSenderId: "1048840913149",
  appId: "1:1048840913149:web:4f1b772b853b602cc93e94",
  measurementId: "G-P5JPR90CX8"
};

// Initialize Firebase
const app = initializeApp(firebaseConfig);
const database = getDatabase(app);
const analytics = getAnalytics(app);

// Global state variables
let items = [];
let currentReceiptOrder = null;
let currentOrderToUpdate = null;

// --- DOM elements and event listeners ---
document.addEventListener('DOMContentLoaded', () => {
    if (document.getElementById('productForm')) {
        // This is the index page
        updateCartDisplay();
        document.getElementById('productForm').addEventListener('submit', function(e) {
            e.preventDefault();
            addItem();
        });
    }

    if (document.getElementById('orderList')) {
        // This is the admin page
        listenForOrders();
        document.getElementById('orderDetailModal').addEventListener('click', function(e) {
            if (e.target === this) {
                closeModal();
            }
        });
        document.getElementById('updateStatusBtn').addEventListener('click', updateOrderStatus);
    }
});

// --- General Functions ---
window.selectProductName = function() {
    const select = document.getElementById('productNameSelect');
    const input = document.getElementById('productName');
    if (select.value) {
        input.value = select.value;
    }
}

window.clearProductSelect = function() {
    document.getElementById('productNameSelect').value = '';
}

window.selectProductWeight = function() {
    const select = document.getElementById('productWeightSelect');
    const input = document.getElementById('productWeight');
    if (select.value) {
        input.value = select.value;
    }
}

window.clearWeightSelect = function() {
    document.getElementById('productWeightSelect').value = '';
}

window.showStatus = function(message, type) {
    const statusDiv = document.getElementById('statusMessage');
    if (!statusDiv) return;
    statusDiv.className = type === 'success' ? 'status-success' : type === 'error' ? 'status-error' : 'status-info';
    statusDiv.innerHTML = `<span class="text-xl">${type === 'success' ? '‚úÖ' : type === 'error' ? '‚ùå' : '‚ÑπÔ∏è'}</span><span>${message}</span>`;
    statusDiv.classList.remove('hidden');
    
    setTimeout(() => {
        statusDiv.classList.add('hidden');
    }, 3000);
}

window.getStatusColor = function(status) {
    switch(status) {
      case '‡∏£‡∏≠‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£': return '‡∏£‡∏≠‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£';
      case '‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏à‡∏±‡∏î‡∏™‡πà‡∏á': return '‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏à‡∏±‡∏î‡∏™‡πà‡∏á';
      case '‡∏à‡∏±‡∏î‡∏™‡πà‡∏á‡πÅ‡∏•‡πâ‡∏ß': return '‡∏à‡∏±‡∏î‡∏™‡πà‡∏á‡πÅ‡∏•‡πâ‡∏ß';
      case '‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å': return '‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å';
      default: return '';
    }
}

window.getStatusIcon = function(status) {
    switch(status) {
      case '‡∏£‡∏≠‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£': return '‚è≥';
      case '‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏à‡∏±‡∏î‡∏™‡πà‡∏á': return 'üöö';
      case '‡∏à‡∏±‡∏î‡∏™‡πà‡∏á‡πÅ‡∏•‡πâ‡∏ß': return '‚úÖ';
      case '‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å': return '‚ùå';
      default: return 'üì¶';
    }
}

window.closeModal = function() {
    const modal = document.getElementById('orderDetailModal') || document.getElementById('successModal');
    if (modal) {
        modal.classList.add('hidden');
        modal.classList.remove('flex');
    }
}


// --- Index Page Logic ---
window.addItem = function() {
    const name = document.getElementById('productName').value.trim();
    const weight = document.getElementById('productWeight').value.trim();
    const qty = parseInt(document.getElementById('productQty').value);
    const priceInput = document.getElementById('productPrice').value;
    const price = priceInput === '' ? 0 : parseFloat(priceInput);

    if (!name || qty <= 0) {
        showStatus('‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏ä‡∏∑‡πà‡∏≠‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡πÅ‡∏•‡∏∞‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÉ‡∏´‡πâ‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á', 'error');
        return;
    }
    if (price < 0) {
        showStatus('‡∏£‡∏≤‡∏Ñ‡∏≤‡∏ï‡πâ‡∏≠‡∏á‡πÑ‡∏°‡πà‡∏ï‡∏¥‡∏î‡∏•‡∏ö', 'error');
        return;
    }

    const item = {
        id: Date.now(),
        name: name,
        size: weight || '-',
        qty: qty,
        price: price,
        total: qty * price
    };

    items.push(item);
    updateCartDisplay();
    clearForm();
    showStatus('‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏•‡∏á‡∏ï‡∏∞‡∏Å‡∏£‡πâ‡∏≤‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß!', 'success');
}

window.removeItem = function(id) {
    items = items.filter(item => item.id !== id);
    updateCartDisplay();
    showStatus('‡∏•‡∏ö‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏ï‡∏∞‡∏Å‡∏£‡πâ‡∏≤‡πÅ‡∏•‡πâ‡∏ß', 'success');
}

window.editItem = function(id) {
    const item = items.find(item => item.id === id);
    if (!item) return;

    document.getElementById('productName').value = item.name;
    document.getElementById('productNameSelect').value = '';

    document.getElementById('productWeight').value = item.size === '-' ? '' : item.size;
    document.getElementById('productWeightSelect').value = '';

    document.getElementById('productQty').value = item.qty;
    document.getElementById('productPrice').value = item.price === 0 ? '' : item.price;

    items = items.filter(i => i.id !== id);
    updateCartDisplay();
    
    showStatus('‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏ñ‡∏π‡∏Å‡πÇ‡∏´‡∏•‡∏î‡πÉ‡∏ô‡∏ü‡∏≠‡∏£‡πå‡∏°‡πÅ‡∏•‡πâ‡∏ß ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡πÅ‡∏•‡∏∞‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÉ‡∏´‡∏°‡πà', 'success');
    document.getElementById('productForm').scrollIntoView({ behavior: 'smooth' });
}

window.updateCartDisplay = function() {
    const cartItemsDiv = document.getElementById('cartItems');
    const cartCount = document.getElementById('cartCount');
    const cartSummary = document.getElementById('cartSummary');
    const totalAmount = document.getElementById('totalAmount');

    if (!cartItemsDiv || !cartCount) return;

    cartCount.textContent = items.length;

    if (items.length === 0) {
        cartItemsDiv.innerHTML = `
            <div class="text-center py-12 text-gray-500">
                <div class="text-6xl mb-4 animate-bounce-slow">üçå</div>
                <p class="text-xl font-semibold">‡∏ï‡∏∞‡∏Å‡∏£‡πâ‡∏≤‡∏ß‡πà‡∏≤‡∏á‡πÄ‡∏õ‡∏•‡πà‡∏≤</p>
                <p class="text-sm mt-2">‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Å‡∏•‡πâ‡∏ß‡∏¢‡πÅ‡∏•‡∏∞‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏≠‡∏∑‡πà‡∏ô‡πÜ ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠</p>
            </div>
        `;
        if (cartSummary) cartSummary.classList.add('hidden');
        return;
    }

    let cartHTML = '';
    let total = 0;

    items.forEach(item => {
        total += item.total;
        cartHTML += `
            <div class="cart-item">
                <div class="flex justify-between items-start mb-3">
                    <div class="flex-1">
                        <h4 class="font-bold text-lg text-gray-800">${item.name}</h4>
                        <p class="text-gray-600">${item.size}</p>
                    </div>
                    <div class="flex gap-2 ml-4">
                        <button onclick="editItem(${item.id})" class="bg-blue-500 hover:bg-blue-600 text-white px-3 py-2 rounded-lg transition-all duration-300 hover:scale-105" title="‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤">
                            ‚úèÔ∏è
                        </button>
                        <button onclick="removeItem(${item.id})" class="btn-danger" title="‡∏•‡∏ö‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤">
                            üóëÔ∏è
                        </button>
                    </div>
                </div>
                <div class="flex justify-between items-center">
                    <div class="text-sm text-gray-600">
                        ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô: <span class="font-semibold">${item.qty}</span> √ó 
                        <span class="font-semibold">${item.price.toFixed(2)}</span> ‡∏ö‡∏≤‡∏ó
                    </div>
                    <div class="text-lg font-bold text-yellow-600">
                        ${item.total.toFixed(2)} ‡∏ö‡∏≤‡∏ó
                    </div>
                </div>
            </div>
        `;
    });

    cartItemsDiv.innerHTML = cartHTML;
    totalAmount.textContent = total.toFixed(2) + ' ‡∏ö‡∏≤‡∏ó';
    if (cartSummary) cartSummary.classList.remove('hidden');
}

function clearForm() {
    document.getElementById('productName').value = '';
    document.getElementById('productNameSelect').value = '';
    document.getElementById('productWeight').value = '';
    document.getElementById('productWeightSelect').value = '';
    document.getElementById('productQty').value = '1';
    document.getElementById('productPrice').value = '';
}

window.submitOrder = async function() {
    const customerName = document.getElementById('customerName').value.trim();
    const customerPhone = document.getElementById('customerPhone').value.trim();
    const customerAddress = document.getElementById('customerAddress').value.trim();

    if (!customerName || !customerPhone || !customerAddress) {
        showStatus('‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤‡πÉ‡∏´‡πâ‡∏Ñ‡∏£‡∏ö‡∏ñ‡πâ‡∏ß‡∏ô', 'error');
        return;
    }

    if (items.length === 0) {
        showStatus('‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏•‡∏á‡∏ï‡∏∞‡∏Å‡∏£‡πâ‡∏≤‡∏Å‡πà‡∏≠‡∏ô‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠', 'error');
        return;
    }

    const totalAmount = items.reduce((sum, item) => sum + item.total, 0);
    const orderData = {
        customer: {
            name: customerName,
            phone: customerPhone,
            address: customerAddress
        },
        items: items,
        totalAmount: totalAmount,
        orderDate: new Date().toISOString(),
        status: '‡∏£‡∏≠‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£'
    };

    showStatus('‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏≠‡∏≠‡∏£‡πå‡πÄ‡∏î‡∏≠‡∏£‡πå...', 'info');
    
    try {
        const ordersRef = ref(database, 'orders');
        const newOrderRef = push(ordersRef);
        await set(newOrderRef, orderData);
        showStatus("‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏≠‡∏≠‡∏£‡πå‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à ‚úÖ", "success");
        
        showReceiptView({ id: newOrderRef.key, ...orderData });

        items = [];
        updateCartDisplay();
        document.getElementById('customerName').value = '';
        document.getElementById('customerPhone').value = '';
        document.getElementById('customerAddress').value = '';
    } catch (error) {
        console.error("Error saving order:", error);
        showStatus("‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏≠‡∏≠‡∏£‡πå‡πÄ‡∏î‡∏≠‡∏£‡πå", "error");
    }
}

// --- Receipt functions ---
window.showReceiptView = function(order) {
    currentReceiptOrder = order;
    document.getElementById('mainOrderForm').classList.add('hidden');
    const receiptView = document.getElementById('receiptView');
    receiptView.classList.remove('hidden');

    document.getElementById('receiptDate').textContent = new Date(order.orderDate).toLocaleString('th-TH');
    document.getElementById('receiptCustomerName').textContent = order.customer?.name || '‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏‡∏ä‡∏∑‡πà‡∏≠';
    document.getElementById('receiptCustomerPhone').textContent = order.customer?.phone || '‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏‡πÄ‡∏ö‡∏≠‡∏£‡πå';
    document.getElementById('receiptCustomerAddress').textContent = order.customer?.address || '‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà';

    const receiptItems = document.getElementById('receiptItems');
    receiptItems.innerHTML = order.items?.map(item => `
        <tr class="border-b border-gray-200">
          <td class="p-3 text-sm font-medium">${item.name}${item.size && item.size !== '-' ? ` (${item.size})` : ''}</td>
          <td class="p-3 text-sm text-center">${item.qty}</td>
          <td class="p-3 text-sm text-center">${item.price?.toFixed(2) || '0.00'}</td>
          <td class="p-3 text-sm text-right font-semibold text-green-600">${item.total?.toFixed(2) || '0.00'}</td>
        </tr>
    `).join('') || '<tr><td colspan="4" class="p-6 text-center text-gray-500">‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤</td></tr>';

    document.getElementById('receiptTotal').textContent = order.totalAmount?.toFixed(2) || '0.00';

    const statusColor = getStatusColor(order.status || '‡∏£‡∏≠‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£');
    const statusIcon = getStatusIcon(order.status || '‡∏£‡∏≠‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£');
    const receiptStatus = document.getElementById('receiptStatus');
    receiptStatus.className = `status-badge ${statusColor}`;
    receiptStatus.innerHTML = `<span class="text-base">${statusIcon}</span> ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞: ${order.status || '‡∏£‡∏≠‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£'}`;
}

window.openPrintableReceipt = function() {
    const receiptContent = document.getElementById("receiptContent");
    if (!receiptContent) return;

    const win = window.open('', '_blank');
    win.document.write(`
    <html>
    <head>
      <title>‡πÉ‡∏ö‡πÄ‡∏™‡∏£‡πá‡∏à‡∏£‡πâ‡∏≤‡∏ô‡πÅ‡∏°‡πà‡∏î‡∏≠‡∏ô‡πÇ‡∏≠‡∏ó‡∏≠‡∏õ</title>
      <link href="https://fonts.googleapis.com/css2?family=Kanit:wght@400;600;800&display=swap" rel="stylesheet">
      <link rel="stylesheet" href="styles.css">
      <script src="https://cdn.tailwindcss.com"></script>
      <style>
        body { margin: 0; padding: 0; background: white; -webkit-print-color-adjust: exact; print-color-adjust: exact; font-family: 'Kanit', sans-serif; }
        #receiptContent { max-width: 700px; margin: auto; padding: 20px; background: white; }
        @page { size: A4; margin: 20mm; }
        @media print { .no-print { display: none !important; } .receipt-watermark { opacity: 0.04 !important; } }
      </style>
    </head>
    <body onload="window.print();">
      ${receiptContent.outerHTML}
    </body>
    </html>
    `);
    win.document.close();
}

window.downloadReceiptAsImage = async function() {
    if (!currentReceiptOrder) return;
    const receiptContent = document.getElementById('receiptContent');
    if (!receiptContent) {
        showStatus('‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡∏´‡∏≤‡πÉ‡∏ö‡πÄ‡∏™‡∏£‡πá‡∏à', 'error');
        return;
    }
    showStatus('‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û...', 'info');
    try {
        const canvas = await html2canvas(receiptContent, {
            backgroundColor: '#ffffff',
            scale: 2,
            useCORS: true
        });
        const customerName = currentReceiptOrder.customer?.name?.trim() || '‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤';
        const sanitizedName = customerName.replace(/[\\/:*?"<>|]/g, '');
        const dateStr = new Date().toISOString().split('T')[0];
        const link = document.createElement('a');
        link.href = canvas.toDataURL('image/png');
        link.download = `‡πÉ‡∏ö‡πÄ‡∏™‡∏£‡πá‡∏à-${sanitizedName}-${dateStr}.png`;
        link.click();
        showStatus(`‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î‡πÉ‡∏ö‡πÄ‡∏™‡∏£‡πá‡∏à‡∏Ç‡∏≠‡∏á ${sanitizedName} ‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß ‚úÖ`, 'success');
    } catch (error) {
        console.error('‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡πÉ‡∏ö‡πÄ‡∏™‡∏£‡πá‡∏à:', error);
        showStatus('‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û', 'error');
    }
}

// --- Admin Page Logic ---
window.listenForOrders = function() {
    const ordersRef = ref(database, 'orders');
    onValue(ordersRef, (snapshot) => {
        const orders = snapshot.val();
        renderOrders(orders);
    });
}

window.renderOrders = function(orders) {
    const orderListDiv = document.getElementById('orderList');
    if (!orderListDiv) return;

    if (!orders) {
        orderListDiv.innerHTML = `
            <div class="text-center py-12 text-gray-500">
                <div class="text-6xl mb-4 animate-bounce-slow">üì¶</div>
                <p class="text-xl font-semibold">‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏≠‡∏≠‡∏£‡πå‡πÄ‡∏î‡∏≠‡∏£‡πå‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö</p>
                <p class="text-sm mt-2">‡∏≠‡∏≠‡∏£‡πå‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏ó‡∏µ‡πà‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤‡∏™‡∏±‡πà‡∏á‡∏à‡∏∞‡πÅ‡∏™‡∏î‡∏á‡∏ó‡∏µ‡πà‡∏ô‡∏µ‡πà</p>
            </div>
        `;
        return;
    }

    let orderHTML = '';
    const sortedOrders = Object.entries(orders).sort(([, a], [, b]) => new Date(b.orderDate) - new Date(a.orderDate));

    sortedOrders.forEach(([orderId, order]) => {
        const statusColor = getStatusColor(order.status);
        const statusIcon = getStatusIcon(order.status);
        const orderDate = new Date(order.orderDate).toLocaleString('th-TH');
        
        orderHTML += `
            <div class="order-card flex flex-col md:flex-row justify-between items-start md:items-center">
                <div class="flex-1 mb-4 md:mb-0">
                    <div class="flex items-center gap-3 mb-1">
                        <span class="text-xl font-bold text-yellow-600">#${orderId.substring(0, 8)}...</span>
                        <div class="status-badge ${statusColor}">
                            <span class="text-sm">${statusIcon}</span>
                            <span>${order.status}</span>
                        </div>
                    </div>
                    <p class="text-lg font-medium text-gray-800">‡∏ú‡∏π‡πâ‡∏™‡∏±‡πà‡∏á: ${order.customer?.name || '‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏'}</p>
                    <p class="text-sm text-gray-500 mt-1">‡∏™‡∏±‡πà‡∏á‡πÄ‡∏°‡∏∑‡πà‡∏≠: ${orderDate}</p>
                </div>
                <div class="flex flex-col md:flex-row gap-4 w-full md:w-auto">
                    <button onclick="showOrderDetail('${orderId}')" class="btn-secondary w-full md:w-auto">
                        <span class="text-lg">üëÅÔ∏è</span> ‡∏î‡∏π‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î
                    </button>
                    <button onclick="copyOrderDetails('${orderId}')" class="btn-primary w-full md:w-auto">
                        <span class="text-lg">üìã</span> ‡∏Ñ‡∏±‡∏î‡∏•‡∏≠‡∏Å
                    </button>
                </div>
            </div>
        `;
    });

    orderListDiv.innerHTML = orderHTML;
}

window.showOrderDetail = function(orderId) {
    const ordersRef = ref(database, `orders/${orderId}`);
    onValue(ordersRef, (snapshot) => {
        const order = snapshot.val();
        if (order) {
            currentOrderToUpdate = { id: orderId, ...order };
            document.getElementById('orderIdDisplay').textContent = `#${orderId.substring(0, 8)}`;
            document.getElementById('modalCustomerName').textContent = order.customer?.name || '‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏‡∏ä‡∏∑‡πà‡∏≠';
            document.getElementById('modalCustomerPhone').textContent = order.customer?.phone || '‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏‡πÄ‡∏ö‡∏≠‡∏£‡πå';
            document.getElementById('modalCustomerAddress').textContent = order.customer?.address || '‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà';
            document.getElementById('modalTotalAmount').textContent = order.totalAmount?.toFixed(2) || '0.00';

            const modalOrderItems = document.getElementById('modalOrderItems');
            modalOrderItems.innerHTML = order.items?.map(item => `
                <tr class="border-b border-gray-200">
                    <td class="p-3 text-sm">${item.name} (${item.size || '-'})</td>
                    <td class="p-3 text-sm text-center">${item.qty}</td>
                    <td class="p-3 text-sm text-right">${(item.qty * item.price).toFixed(2)}</td>
                </tr>
            `).join('') || '<tr><td colspan="3" class="p-4 text-center text-gray-500">‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤</td></tr>';
            
            document.getElementById('orderStatusSelect').value = order.status;

            document.getElementById('orderDetailModal').classList.remove('hidden');
            document.getElementById('orderDetailModal').classList.add('flex');
        }
    }, { onlyOnce: true });
}

window.updateOrderStatus = async function() {
    if (!currentOrderToUpdate) return;
    const newStatus = document.getElementById('orderStatusSelect').value;
    const orderId = currentOrderToUpdate.id;

    const updates = {};
    updates[`/orders/${orderId}/status`] = newStatus;

    try {
        await update(ref(database), updates);
        showStatus('‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!', 'success');
        closeModal();
    } catch (error) {
        console.error("Error updating order status:", error);
        showStatus('‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞', 'error');
    }
}

window.copyOrderDetails = function(orderId) {
    const ordersRef = ref(database, `orders/${orderId}`);
    onValue(ordersRef, (snapshot) => {
        const order = snapshot.val();
        if (order) {
            let textToCopy = `üìã ‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏≠‡∏≠‡∏£‡πå‡πÄ‡∏î‡∏≠‡∏£‡πå #${orderId.substring(0, 8)}\n`;
            textToCopy += `-------------------------------\n`;
            textToCopy += `üë§ ‡∏ä‡∏∑‡πà‡∏≠‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤: ${order.customer?.name || '-'}\n`;
            textToCopy += `üìû ‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£: ${order.customer?.phone || '-'}\n`;
            textToCopy += `üè† ‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà: ${order.customer?.address || '-'}\n\n`;
            textToCopy += `‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤:\n`;
            order.items.forEach(item => {
                textToCopy += ` - ${item.name} (${item.size || '-'}): ${item.qty} ‡∏ä‡∏¥‡πâ‡∏ô x ${item.price.toFixed(2)} ‡∏ö‡∏≤‡∏ó = ${(item.qty * item.price).toFixed(2)} ‡∏ö‡∏≤‡∏ó\n`;
            });
            textToCopy += `\nüí∞ ‡∏¢‡∏≠‡∏î‡∏£‡∏ß‡∏°: ${order.totalAmount.toFixed(2)} ‡∏ö‡∏≤‡∏ó\n`;
            textToCopy += `üóìÔ∏è ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞: ${order.status}\n`;

            navigator.clipboard.writeText(textToCopy).then(() => {
                showStatus('‡∏Ñ‡∏±‡∏î‡∏•‡∏≠‡∏Å‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏≠‡∏≠‡∏£‡πå‡πÄ‡∏î‡∏≠‡∏£‡πå‡πÅ‡∏•‡πâ‡∏ß!', 'success');
            }).catch(err => {
                console.error('Failed to copy text: ', err);
                showStatus('‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏Ñ‡∏±‡∏î‡∏•‡∏≠‡∏Å‡πÑ‡∏î‡πâ', 'error');
            });
        }
    }, { onlyOnce: true });
}
